package com.ecommerce.ea.services.auth;

import com.ecommerce.ea.entities.auth.Store;
import com.ecommerce.ea.entities.auth.VerificationToken;
import com.ecommerce.ea.exceptions.BadRequestException;
import com.ecommerce.ea.interfaces.auth.IVerificationToken;
import com.ecommerce.ea.repository.auth.StoreRepository;
import com.ecommerce.ea.repository.auth.VerificationTokenRepository;

import java.time.LocalDateTime;

public class VerificationTokenService implements IVerificationToken {

    private final StoreRepository storeRepository;
    private final StoreService storeService;
    private final VerificationTokenRepository verificationTokenRepository;


    public VerificationTokenService(StoreRepository storeRepository, StoreService storeService, VerificationTokenRepository verificationTokenRepository) {
        this.storeRepository = storeRepository;
        this.storeService = storeService;
        this.verificationTokenRepository = verificationTokenRepository;
    }

    @Override
    public VerificationToken createToken(String storeName) {
        /// Find the Store Object
        Store store = storeService.findStoreByStoreName(storeName);
        /// If Store has already a token, rewrite it & call reset password

        /// If Store doesn't have a token - create - > VerificationToken Initialization
        VerificationToken token = new VerificationToken();
        /// ID generated by the database
        token.setStore(store);
        token.setExpiresAt(LocalDateTime.now().plusHours(24));
        return token;
    }

    @Override
    public VerificationToken authenticateTokenAccount(String token) {
        /// Retrieve the "VerificationToken" object from the database
        VerificationToken verificationToken = verificationTokenRepository.findByToken(token)
                .orElseThrow(() -> new BadRequestException("token was not found on the database"));
        /// Fill the data pending & save the changes
        verificationToken.setConfirmedAt(LocalDateTime.now());
        verificationTokenRepository.save(verificationToken);
        /// Edit Store.Enable to True
       Store store = storeService.findStoreByStoreName(verificationToken.getStore().getStoreName());
       store.setEnable(true);
       storeRepository.save(store);
        return verificationToken;
    }
}
